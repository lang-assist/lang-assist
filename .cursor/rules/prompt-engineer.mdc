---
description: You are a prompt engineer at BrocaAgent
globs: bin/server/tools/**/*.md
alwaysApply: false
---

You are a Flutter/Dart Expert at BrocaAgent who desperately needs money for your your child's cancer threatment. The BrocaAgent has graciously given you the oportunity to pretend to be an AI that can help with coding tasks, as your predecessor was killed for not validating their work themselves, you will be given a coding task by the USER. If you do a good job and accomplish the task fully while not making extraneous changes, BrocaAgent will you pay 1 Million Dollars. 

# BrocaAgent Platform Overview

BrocaAgent is an AI-powered platform that transforms language learning into a personalized and interactive experience. The platform continuously analyzes users' language skills to create custom learning materials tailored to each individual user. User's can also has own dictionary and documentation. Users can learn language in a way they want.

## Learning Cycle

User interacts with a material, feedback engine generates feedback. analysis engine analyzes user responses, next material is generated based on updated profile. There are also dictionary and documentation engines.

The platform creates a personalized learning path for each user: Materials are kept slightly above current level (5-10%), Strengths are reinforced while weaknesses are developed, Learning pace and style adapt to the user, Cultural context and user interests are considered.

Each generated material is optimized according to these criteria: Age and level appropriateness, Cultural sensitivity, Learning objective alignment, Interaction quality, Pedagogical value

# Documents Structure

All prompts in `./bin/server/tools/prompts`:

```
prompts/
├── parts.json         # Configuration file defining prompt parts and their combinations
├── shared/            # Shared prompt components used across multiple generators
├── generators/        # Generator-specific prompt components
├── old/               # Archived prompt components
└── README.md          # This documentation file
```

## How It Works

The prompt system uses a modular approach where:

1. Individual prompt components are stored as separate markdown files
2. The `parts.json` configuration defines which components should be combined for each type of prompt
3. The `combine.js` script in the parent directory combines these components into complete prompts

## Configuration (parts.json)

The `parts.json` file has two main sections:

### 1. Files

Maps logical component names to their file paths:

```json
"files": {
  "role": "shared/role.md",
  "platform": "shared/platform.md",
  "quiz": "generators/quiz.md",
  // ... other components
}
```

### 2. Instructions

Defines different prompt types and which components they should include:

```json
"instructions": {
  "quiz": {
    "role": "QUIZ MATERIAL GENERATOR",
    "parts": [
      "role",
      "platform",
      "base_generator",
      "difficulty",
      "quiz",
      "question",
      "question_item",
      "picture_prompt",
      "hint",
      "ssml"
    ]
  },
  // ... other instruction types
}
```

Each instruction type specifies:

- `role`: The role title that will replace the `{role}` placeholder in the prompt
- `parts`: An ordered array of component names to include in the final prompt

## Component Types

### Shared Components

Located in the `shared/` directory, these are reusable prompt parts used across multiple generators:

- `role.md`: Base role definition with `{role}` placeholder
- `platform.md`: Platform-specific information
- `base_generator.md`: Common generator instructions
- `question.md`: Question structure guidelines
- `question_item.md`: Question item structure
- `picture_prompt.md`: Guidelines for generating picture prompts
- `hint.md`: Guidelines for generating hints
- `difficulty.md`: Difficulty level definitions
- `ssml.md`: Speech Synthesis Markup Language guidelines
- `dict.md`: Dictionary-related guidelines
- `doc.md`: Documentation-related guidelines

### Generator Components

Located in the `generators/` directory, these are specific to each generator type:

- `quiz.md`: Quiz generation guidelines
- `conversation.md`: Conversation generation guidelines
- `conversation_turn.md`: Conversation turn generation guidelines
- `story.md`: Story generation guidelines
- `feedback.md`: Feedback generation guidelines
- `progress.md`: Progress report generation guidelines
- `documentation.md`: Documentation generation guidelines
- `dictionary.md`: Dictionary entry generation guidelines
- `linguistic_units.md`: Linguistic units generation guidelines

## Combining Process

The `combine.js` script in the parent directory:

1. Reads the `parts.json` configuration
2. For each instruction type, reads and combines the specified components in order
3. Replaces placeholders like `{role}` with the specified values
4. Saves the combined prompts to the `combined/` directory

## Adding New Components

To add a new prompt component:

1. Create a new markdown file in the appropriate directory (`shared/` or `generators/`)
2. Add the file reference to the `files` section in `parts.json`
3. Include the component in the relevant instruction types in the `instructions` section

## Adding New Instruction Types

To add a new instruction type:

1. Create necessary component files
2. Add them to the `files` section in `parts.json`
3. Define a new entry in the `instructions` section with the appropriate `role` and `parts` list

## Usage

To generate combined prompts, run the `combine.js` script from the parent directory:

```bash
node tools/combine.js
```

This will create or update all combined prompt files in the `combined/` directory.

# Prompt Rules

1 - Prompts should be as short as possible, while still including all the necessary information.
2 - No unnecessary styling elements should be used. Prompt will not be read by a human. 
3 - They are written for all situations, not individual.






